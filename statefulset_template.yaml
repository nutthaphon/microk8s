apiVersion: apps/v1
kind: StatefulSet

# It is common for all kind.
metadata:

spec:
  # podManagementPolicy controls how pods are created during initial scale up, 
  # when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, 
  # where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, 
  # the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, 
  # and on scale down will delete all pods at once.
  podManagementPolicy: OrderedReady
  
  # replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, 
  # but individual replicas also have a consistent identity. If unspecified, defaults to 1.
  replicas: 1

  # revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of 
  # all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
  revisionHistoryLimit: 10

  # selector is a label query over pods that should match the replica count. It must match the pod template's labels.
  selector:
    matchExpressions: 
      key: "key"
      operator: "In"
      values: "value"
    matchLabels:
      "key" : "value"
  
  # serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, 
  # and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local 
  # where "pod-specific-string" is managed by the StatefulSet controller.
  serviceName: ""

  # template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, 
  # but have a unique identity from the rest of the StatefulSet.   
  template: 
    # Standard object's metadata. 
    metadata:
    
    # Specification of the desired behavior of the pod.
    spec:
      # Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. 
      # Value must be a positive integer.
      activeDeadlineSeconds: 60

      # If specified, the pod's scheduling constraints
      affinity:
        # Describes node affinity scheduling rules for the pod.
        nodeAffinity:
          # The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
          preferredDuringSchedulingIgnoredDuringExecution:
            # An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
            preference:
              matchExpressions:
                key: ""
                operator: "[In|NotIn|Exists|DoesNotExist|Gt|Lt]"
                valeus: ""
              matchFields:
                key: ""
                operator: "[In|NotIn|Exists|DoesNotExist|Gt|Lt]"
                valeus: ""
            # Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
            weight: 50
          # If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              matchExpressions:
                key: ""
                operator: "[In|NotIn|Exists|DoesNotExist|Gt|Lt]"
                valeus: ""
              matchFields:
                key: ""
                operator: "[In|NotIn|Exists|DoesNotExist|Gt|Lt]"
                valeus: ""
        # Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            podAffinityTerm:
              labelSelector:
                matchExpressions: 
                - key: "key"
                  operator: "In"
                  values: "value"
                matchLabels:
                  "key" : "value"
              # namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
              namespaces: default
              
              # This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
              topologyKey: affinity
            
            # weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
            weight: 50
          requiredDuringSchedulingIgnoredDuringExecution:
            labelSelector:
              matchExpressions: 
              - key: "key"
                operator: In
                values: "value"
              matchLabels:
                "key" : "value"
            namespaces: default
            topologyKey: affinity

        # Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            podAffinityTerm:
              labelSelector:
                matchExpressions: 
                  key: "key"
                  operator: "In"
                  values: "value"
                matchLabels:
                  "key" : "value"
              # namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
              namespaces: default
              
              # This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
              topologyKey: affinity
            
            # weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
            weight: 50
          requiredDuringSchedulingIgnoredDuringExecution:
            labelSelector:
              matchExpressions: 
              - key: key
                operator: In
                values: value
              matchLabels:
                "key" : "value"
            namespaces: default
            topologyKey: affinity
      # AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
      automountServiceAccountToken: true
      
      # List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
      containers:
        # Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.
        - args: 
          - "startAll.sh"
          - "-d"
          # Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. 
          command:
            - "startDB.sh"
            - "startWeb.sh"
          # List of environment variables to set in the container. Cannot be updated.
          env:
            - name: MYSQL_HOME
              value: /mysql
            - name: MYSQL_DB_NAME
              valueFrom:
                # Selects a key of a ConfigMap.
                configMapKeyRef:
                  key:
                  name:
                  optional:
                
                # Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
                fieldRef:
                  apiVersion:
                  fieldPath:
                
                # Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                resourceFieldRef:
                  containerName:
                  divisor:
                  resource:
                
                # Selects a key of a secret in the pod's namespace
                secretKeyRef:
                  key:
                  name:
                  optional:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: mariadb-root-password              
          
          # List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
          envFrom:
            - configMapRef:
                name: env-configmap
                optional: false
            - secretRef:
                name: env-secrets
                optional: false
            
          # Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
          image: nutthaphon/hadoop:3.1.2-spark-2.4.3
          
          # Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
          imagePullPolicy: Always

          # Actions that the management system should take in response to container lifecycle events. Cannot be updated.
          lifecycle:
            # PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. 
            postStart:
              # One and only one of the following should be specified. Exec specifies the action to take.
              exec:
                command:
                  - /script/aaa.sh
                  - /script/bbb.sh
              
              # HTTPGet specifies the http request to perform.
              httpGet:
                host:
                httpHeaders:
                  - name:
                    value:
                  - name:
                    value:
                path:
                port:
                scheme:
              
              # TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
              tcpSocket:
                # Optional: Host name to connect to, defaults to the pod IP.
                host:
                # Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                port:

            # PreStop is called immediately before a container is terminated due to an API request or management event such as liveness probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached.
            preStop:
              # One and only one of the following should be specified. Exec specifies the action to take.
              exec:
                command:
                  - /script/aaa.sh
                  - /script/bbb.sh
              
              # HTTPGet specifies the http request to perform.
              httpGet:
                host:
                httpHeaders:
                  - name:
                    value:
                  - name:
                    value:
                path:
                port:
                scheme:
              # TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
              tcpSocket:
                # Optional: Host name to connect to, defaults to the pod IP.
                host:
                # Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                port:

          # Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. 
          livenessProbe:
            exec:
                command:
                  - /script/aaa.sh
                  - /script/bbb.sh
              
            # Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
            failureThreshold:
            
            # HTTPGet specifies the http request to perform.
            httpGet:
              host:
              httpHeaders:
                - name:
                  value:
                - name:
                  value:
              path:
              port:
              scheme:

            # Number of seconds after the container has started before liveness probes are initiated.
            initialDelaySeconds:

            # How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
            periodSeconds:

            # Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
            successThreshold:

            # TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
            tcpSocket:
              # Optional: Host name to connect to, defaults to the pod IP.
              host:
              # Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              port:

            # Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. 
            timeoutSeconds:

          # Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
          name:

          # List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
          ports:
            # Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
            - containerPort:
                  
              # What host IP to bind the external port to.
              hostIP:
                  
              # Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
              hostPort:
                  
              # If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
              name:
                  
              # Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
              protocol: TCP

            - containerPort:
              hostIP:
              hostPort:
              name:
              protocol:  
          
          # Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. 
          readinessProbe:
            exec:
                command:
                  - /script/aaa.sh
                  - /script/bbb.sh
              
            # Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
            failureThreshold:
            
            # HTTPGet specifies the http request to perform.
            httpGet:
              host:
              httpHeaders:
                - name:
                  value:
                - name:
                  value:
              path:
              port:
              scheme:

            # Number of seconds after the container has started before liveness probes are initiated.
            initialDelaySeconds:

            # How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
            periodSeconds:

            # Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
            successThreshold:

            # TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
            tcpSocket:
              # Optional: Host name to connect to, defaults to the pod IP.
              host:
              # Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
              port:

            # Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. 
            timeoutSeconds:

          # Compute Resources required by this container. Cannot be updated. 
          resources:
            # Limits describes the maximum amount of compute resources allowed. 
            limits:
              memory: "128Mi"
              cpu: "500m"
            # Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value.
            requests:
              memory: "64Mi"
              cpu: "250m"
          # Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/
          securityContext:
              
          # Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
          stdin:

          # Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
          stdinOnce:

          # Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
          terminationMessagePath:

          # Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
          terminationMessagePolicy:

          # Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
          tty: false

          # volumeDevices is the list of block devices to be used by the container. This is a beta feature.
          volumeDevices:
            # devicePath is the path inside of the container that the device will be mapped to.
            devicePath:
            # name must match the name of a persistentVolumeClaim in the pod
            name: 

          # Pod volumes to mount into the container's filesystem. Cannot be updated.
          volumeMounts:
            # Path within the container at which the volume should be mounted. Must not contain ':'.
            mountPath:

            # mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
            mountPropagation:

            # This must match the Name of a Volume.
            name:

            # Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
            readOnly:

            # Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
            subPath:

            # Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive. This field is beta in 1.15.
            subPathExpr:

          # Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
          workingDir: /hadoop
        - args:
          command:
          env:
          envForm:
          image:
          imagePullPolicy:
          lifecycle:
          livenessProbe:
          name:
          ports:
          readinessProbe:
          resources:
          securityContext:
          stdin:
          stdinOnce:
          terminationMessagePath:
          terminationMessagePolicy:
          tty:
          volumeDevices:
          volumeMounts:
          workingDir:

      # Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
      dnsConfig:

      # Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
      dnsPolicy: ClusterFirst

      # EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
      enableServiceLinks:

      # HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
      hostAliases:
      
      # Use the host's ipc namespace. Optional: Default to false.
      hostIPC: false

      # Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
      hostNetwork: false

      # Use the host's pid namespace. Optional: Default to false.
      hostPID: false

      # Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
      hostname:

      # ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. 
      imagePullSecrets:

      # List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated.
      initContainers:

      # NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
      nodeName:

      # NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.
      nodeSelector:

      # Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. 
      overhead:

      # PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.
      preemptionPolicy: 

      # The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
      priority:

      # If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
      priorityClassName:

      # If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
      readinessGates:

      # Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. 
      restartPolicy: Always

      # RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler.
      runtimeClassName:

      # If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
      schedulerName:

      # SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty. See type description for default values of each field.
      securityContext:

      # DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
      serviceAccount:

      # ServiceAccountName is the name of the ServiceAccount to use to run this pod. 
      serviceAccountName:

      # Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. This field is beta-level and may be disabled with the PodShareProcessNamespace feature.
      shareProcessNamespace:

      # If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
      subdomain:

      # Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
      terminationGracePeriodSeconds:

      # If specified, the pod's tolerations.
      tolerations:

      # List of volumes that can be mounted by containers belonging to the pod.
      volumes:
  
  # updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
  updateStrategy:

  # volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. 
  volumeClaimTemplates:

status:
  collisionCount:
  conditions:
  - lastTransitionTime: 
    message:
    reason:
    status:
    type:
  - lastTransitionTime:
    message:
    reason:
    status:
    type:

  currentReplicas:
  currentRevision:
  observedGeneration:
  readyReplicas:
  replicas:
  updateRevision:
  updatedReplicas:
